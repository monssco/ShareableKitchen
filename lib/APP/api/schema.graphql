# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type UserImage implements Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

type ListingImage implements Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

type AvailabilityObject {
  startDate: DateTime!
  endDate: DateTime!
  type: AvailabilityType!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

# Types of kitchen availability
enum AvailabilityType {
  daily
  weekly
  monthly
}

type Message {
  id: String!
  conversation: Conversation!
  author: User!
  content: String!
  created: DateTime!
}

type Conversation {
  buyer: User!
  seller: User!
  listing: Listing!
  id: String!
  messages: [Message!]!
}

type CountryType {
  id: Int!
  name: String!
  currency: String!
  currencySymbol: String!
  states: [StateType!]
}

type StateType {
  country: CountryType!
  id: Int!
  name: String!
  cities: [CityType!]
}

type CityType {
  state: StateType!
  id: Int!
  name: String!
}

type Listing {
  id: ID!
  author: User!
  title: String!
  description: String!
  availability: AvailabilityObject!
  photos: [ListingImage!]
  address: String!
  city: CityType
  postal: String
  unitPrice: Int!
  sqFtArea: Int!
  features: [PropertyFeatures!]
  propertyType: PropertyType
  bookings: [Booking!]
  draft: Boolean!
}

# Features of a given kitchen
enum PropertyFeatures {
  microwave
  conveyorOven
  tripleSink
  doughSheeter
  standUpCooler
  walkInCooler
  stonePizzaOven
  kitchenOven
  doubleSink
  freezer
  prepTables
  deepFryer
  doughMixer
  other
}

# Self-explanatory
enum PropertyType {
  cafe
  church
  commercialKitchen
  communityCenter
  restaurant
}

type Booking {
  listing: Listing!
  buyer: User!
  type: AvailabilityType!
  startDate: DateTime!
  endDate: DateTime!
  unitPrice: Int!
  unitQuantity: Int!
  calculatedAmount: Int!
  buyerAppFee: Int!
  sellerAppFee: Int!
  created: DateTime!
  paymentDate: DateTime
}

type User {
  id: ID!
  email: String!
  profile_image: UserImage
  first_name: String
  last_name: String
  date_of_birth: DateTime
  address: String
  city: CityType
  postal: String
  stripe_customer_id: String!
  stripe_account_id: String
  listings: [Listing!]
  bookings: [Booking!]
  conversations: [Conversation!]
  message: [Message!]
}

type CreateBookingReturn {
  booking: Booking!
  sessionId: String!
}

interface Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

interface Location {
  address: String!
  city: CityType!
  postal: String
}

input AvailabilityInput {
  startDate: DateTime!
  endDate: DateTime!
  type: AvailabilityType!
}

input CountryInput {
  id: Int!
  name: String!
  currency: String!
  currencySymbol: String!
  states: [StateInput!] = []
}

input StateInput {
  country: CountryInput!
  id: Int!
  name: String!
  cities: [CityInput!] = []
}

input CityInput {
  state: StateInput!
  id: Int!
  name: String!
}

input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

input CreateBookingInput {
  listingId: String!
  startDate: DateTime!
  endDate: DateTime!
  type: AvailabilityType!
  cancelUrl: String!
  successUrl: String!
}

input getBookingQuoteInput {
  listingId: String!
  startDate: DateTime!
  endDate: DateTime!
  type: AvailabilityType!
}

input CreateListingLocationInput {
  address: String!
  cityId: Int!
}

input CreateListingInput {
  title: String!
  description: String!
  unitPrice: Int!
  sqFtArea: Int!
  features: [PropertyFeatures!]!
  propertyType: PropertyType!
  location: CreateListingLocationInput!
  availability: AvailabilityInput!
}

input EditListingLocationInput {
  address: String
  cityId: Float
}

input EditListingInput {
  id: String!
  title: String
  description: String
  availability: AvailabilityInput
  address: String
  location: EditListingLocationInput
  postal: String
  unitPrice: Int
  sqFtArea: Int
  features: [PropertyFeatures!]
  propertyType: PropertyType
}

input SearchListingsInput {
  limit: Int = 10
  offset: Int = 0
  cityId: Int!
  startDate: DateTime
  endDate: DateTime
}

input ListMessagesInput {
  limit: Int = 10
  offset: Int = 0
  conversationId: String!
}

input SendMessageInput {
  content: String!
  conversationId: String!
}

input StartConversationInput {
  listingId: String!
  content: String!
}

input AccountLinkInput {
  refreshUrl: String!
  returnUrl: String!
}

input RegisterUserInput {
  id: ID!
  email: String!
  first_name: String!
  last_name: String!
  date_of_birth: DateTime
}

input UpdateUserLocationInput {
  address: String
  cityId: Float
  postal: String
}

input UpdateUserInput {
  first_name: String
  last_name: String
  date_of_birth: DateTime
  location: UpdateUserLocationInput
}

type Query {
  getBookingQuote(input: getBookingQuoteInput!): Booking!
  listBookings(input: PaginationInput!): [Booking!]!
  listReservations(input: PaginationInput!): [Booking!]!
  retrieveBooking(id: String!): Booking!
  getCountries: [CountryType!]!

  # This endpoint is used to check if an account has payouts enabled. If payouts are not enabled, they must enable them by following the by using the getAccountLink endpoint.
  arePayoutsEnabled: Boolean!
  homeGalleryListings: [Listing!]!
  myListings(input: PaginationInput!): [Listing!]!
  retrieveListing(id: String!): Listing!
  searchListings(input: SearchListingsInput!): [Listing!]!
  listConversations(input: PaginationInput!): [Conversation!]!
  listMessages(input: ListMessagesInput!): [Message!]!
  getStripeAccount: JSON!
  getStripeAccountBalance: JSON!

  # Account links allow you to onboard a user via stripe. https://stripe.com/docs/api/account_links
  getAccountLink(input: AccountLinkInput!): JSON!
  getStripeCustomer: JSON!
  listPaymentMethods(input: String!): JSON!
  getExternalAccount(input: String!): JSON!
  listExternalAccounts: JSON!
  retrievePaymentMethod(input: String!): JSON!
  getPayout(input: String!): JSON!
  listPayouts: JSON!
  me: User
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBooking(input: CreateBookingInput!): CreateBookingReturn!

  # Before creating a listing, check to see if this account has payouts enabled by calling arePayoutsEnabled query.
  createListing(input: CreateListingInput!): Listing!
  deleteMyListing(id: String!): Boolean!
  editListing(input: EditListingInput!): Listing!
  sendMessage(input: SendMessageInput!): Message!
  startConversation(input: StartConversationInput!): Conversation!
  updateStripeAccount(input: String!): JSON!
  attachPaymentMethod(input: String!): JSON!
  detachPaymentMethod(input: String!): JSON!
  createExternalAccount(input: String!): JSON!
  deleteExternalAccount(input: String!): JSON!
  cancelPayout(input: String!): JSON!
  registerUser(user: RegisterUserInput!): User!
  updateUser(user: UpdateUserInput!): User!
}
