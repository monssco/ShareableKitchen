# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type UserImage implements Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

type ListingImage implements Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

type AvailabilityObject {
  startDate: DateTime!
  endDate: DateTime!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Message {
  id: String!
  conversation: Conversation!
  author: User!
  content: String!
  created: DateTime!
}

type Conversation {
  buyer: User!
  seller: User!
  listing: Listing!
  id: String!
  messages: [Message!]!
}

type CountryType {
  id: ID!
  name: String!
  currency: String!
  currencySymbol: String!
  states: [StateType!]
}

type StateType {
  id: Int!
  name: String!
  cities: [CityType!]
}

type CityType {
  id: Int!
  name: String!
}

type Listing {
  id: ID!
  author: User!
  title: String!
  description: String!
  availability: AvailabilityObject!
  photos: [ListingImage!]
  address: String!
  city: CityType
  postal: String
  price: Int!
  sqFtArea: Int!
  features: [PropertyFeatures!]
  propertyType: PropertyType
  bookings: [Booking!]
  draft: Boolean!
}

# Features of a given kitchen
enum PropertyFeatures {
  microwave
  conveyorOven
  tripleSink
  doughSheeter
  standUpCooler
  walkInCooler
  stonePizzaOven
  kitchenOven
  doubleSink
  freezer
  prepTables
  deepFryer
  other
  doughMixer
}

# Self-explanatory
enum PropertyType {
  cafe
  church
  commercialKitchen
  communityCenter
  restaurant
}

type Booking {
  startDate: DateTime!
  endDate: DateTime!
  created: DateTime!
  paymentDate: DateTime!
}

type User {
  id: ID!
  email: String!
  profile_image: UserImage
  first_name: String
  last_name: String
  date_of_birth: DateTime
  address: String
  city: CityType
  postal: String
  stripe_customer_id: String!
  stripe_account_id: String
  listings: [Listing!]
  bookings: [Booking!]
  conversations: [Conversation!]
  message: [Message!]
}

type PublicUserType {
  id: ID!
  email: String!
  profile_image: UserImage
  first_name: String
  last_name: String
  date_of_birth: DateTime
  address: String
  city: CityType
  postal: String
  stripe_customer_id: String!
  stripe_account_id: String
  listings: [Listing!]
  bookings: [Booking!]
  conversations: [Conversation!]
  message: [Message!]
}

type PublicListing {
  id: ID!
  author: PublicUserType!
  title: String!
  description: String!
  availability: AvailabilityObject!
  photos: [ListingImage!]
  address: String!
  city: CityType
  postal: String
  price: Int!
  sqFtArea: Int!
  features: [PropertyFeatures!]
  propertyType: PropertyType
  bookings: [Booking!]
  draft: Boolean!
}

interface Image {
  original_key: String!
  resized_medium: String!
  resized_small: String!
  resized_large: String!
}

interface Location {
  address: String!
  city: CityType!
  postal: String
}

input AvailabilityInput {
  startDate: DateTime!
  endDate: DateTime!
}

input CountryInput {
  id: ID!
  name: String!
  currency: String!
  currencySymbol: String!
  states: [StateInput!] = []
}

input StateInput {
  id: Int!
  name: String!
  cities: [CityInput!] = []
}

input CityInput {
  id: Int!
  name: String!
}

input CreateListingLocationInput {
  address: String!
  cityId: Float!
}

input CreateListingInput {
  title: String!
  description: String!
  price: Int!
  sqFtArea: Int!
  features: [PropertyFeatures!]!
  propertyType: PropertyType!
  location: CreateListingLocationInput!
  availability: AvailabilityInput!
}

input EditListingLocationInput {
  address: String
  cityId: Float
}

input EditListingInput {
  id: String!
  title: String
  description: String
  availability: AvailabilityInput
  address: String
  location: EditListingLocationInput
  postal: String
  price: Int
  sqFtArea: Int
  features: [PropertyFeatures!]
  propertyType: PropertyType
}

input SearchListingsInput {
  cityId: Float!
}

input SendMessageInput {
  content: String!
  conversationId: String!
}

input StartConversationInput {
  listingId: String!
}

input RegisterUserInput {
  id: ID!
  email: String!
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
}

input UpdateUserLocationInput {
  address: String
  cityId: Float
  postal: String
}

input UpdateUserInput {
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
  location: UpdateUserLocationInput
}

type Query {
  getCountries: [CountryType!]!
  myListings: [Listing!]!
  searchListings(input: SearchListingsInput!): [Listing!]!
  getConversations: [Conversation!]!
  me: User
}

type Mutation {
  createListing(input: CreateListingInput!): Listing!
  deleteMyListing(id: String!): Boolean!
  editListing(input: EditListingInput!): Listing!
  sendMessage(input: SendMessageInput!): Message!
  startConversation(input: StartConversationInput!): Conversation!
  registerUser(user: RegisterUserInput!): User!
  updateUser(user: UpdateUserInput!): User!
}
