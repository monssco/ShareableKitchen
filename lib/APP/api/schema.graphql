# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Booking {
  buyer: String
}

type ListingImage implements Image {
  original_key: String!
  resized_medium: String
  resized_small: String
  resized_large: String
}

type ListingLocation implements Location {
  original_key: String!
  country: String
  city: String
  province: String
  postal: String
}

type ProfileImage implements Image {
  original_key: String!
  resized_medium: String
  resized_small: String
  resized_large: String
}

type UserLocation implements Location {
  original_key: String!
  country: String
  city: String
  province: String
  postal: String
}

type User {
  id: ID!
  email: String!
  profile_image: ProfileImage
  location: UserLocation
  first_name: String
  last_name: String
  date_of_birth: DateTime
  stripe_customer_id: String
  stripe_account_id: String
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Listing {
  id: ID!
  author: User!
  title: String
  description: String
  photos: ListingImage
  location: ListingLocation
  price: Float
  features: [PropertyFeatures]
  propertyType: PropertyType
  sqFtArea: Float
}

# Features of a given kitchen
enum PropertyFeatures {
  microwave
  conveyorOven
  tripleSink
  doughSheeter
  standUpCooler
  walkInCooler
  stonePizzaOven
  kitchenOven
  doubleSink
  freezer
  prepTables
  deepFryer
  other
  doughMixer
}

# Self-explanatory
enum PropertyType {
  cafe
  church
  commercialKitchen
  communityCenter
  restaurant
}

interface Image {
  original_key: String!
  resized_medium: String
  resized_small: String
  resized_large: String
}

interface Location {
  original_key: String!
  country: String
  city: String
  province: String
  postal: String
}

input ListingsInput {
  first: Int
  limit: Int
}

input RegisterUserInput {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  date_of_birth: DateTime
}

input UpdateUserInput {
  first_name: String
  last_name: String
  date_of_birth: DateTime
}

type Query {
  myListings(input: ListingsInput!): [Listing]
  me: User
}

type Mutation {
  registerUser(user: RegisterUserInput!): User!
  updateUser(user: UpdateUserInput!): User!
}
